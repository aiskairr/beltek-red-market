import React, { useState } from 'react';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { useCart } from '@/hooks/use-cart';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { useNavigate } from 'react-router-dom';

enum PaymentMethod {
  CASH = 'cash',
  CARD = 'card',
  QR = 'qr',
  INSTALLMENT = 'installment',
}

enum DeliveryMethod {
  DELIVERY = 'delivery',
  PICKUP = 'pickup',
}

interface FormData {
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  address: string;
  city: string;
  notes: string;
  deliveryMethod: DeliveryMethod;
  paymentMethod: PaymentMethod;
  bank: string | null;
}

const banks = [
  { id: 'mbank', name: '–ú–±–∞–Ω–∫' },
  { id: 'bakaibank', name: '–ë–∞–∫–∞–π –±–∞–Ω–∫' },
  { id: 'companion', name: '–ö–æ–º–ø–∞–Ω—å–æ–Ω' },
  { id: 'rsk', name: '–†–°–ö' },
];

const Checkout = () => {
  const { items, getTotal, clearCart } = useCart();
  const navigate = useNavigate();

  const [formData, setFormData] = useState<any>({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    address: '',
    city: '–ë–∏—à–∫–µ–∫',
    notes: '',
    deliveryMethod: DeliveryMethod.DELIVERY,
    paymentMethod: PaymentMethod.CASH,
    bank: null,
    pickupBranch: '', 
  });

  const [errors, setErrors] = useState<Partial<Record<keyof FormData, string>>>({});

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));

    // Clear error when field is typed in
    if (errors[name as keyof FormData]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name as keyof FormData];
        return newErrors;
      });
    }
  };

  const handlePaymentMethodChange = (value: string) => {
    const paymentMethod = value as PaymentMethod;
    setFormData(prev => ({
      ...prev,
      paymentMethod,
      bank: paymentMethod === PaymentMethod.INSTALLMENT ? 'mbank' : null
    }));
  };

  const handleDeliveryMethodChange = (value: string) => {
    setFormData(prev => ({
      ...prev,
      deliveryMethod: value as DeliveryMethod
    }));
  };

  const handleBankChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFormData(prev => ({ ...prev, bank: e.target.value }));
  };

  const validate = (): boolean => {
    const newErrors: Partial<Record<keyof FormData, string>> = {};

    if (!formData.firstName) newErrors.firstName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    if (!formData.lastName) newErrors.lastName = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é';
    if (!formData.phone) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
    if (!formData.email) newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';

    if (formData.deliveryMethod === DeliveryMethod.DELIVERY) {
      if (!formData.address) newErrors.address = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏';
      if (!formData.city) newErrors.city = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const paymentMethodLabel = (method: string) => {
    switch (method) {
      case PaymentMethod.CASH:
        return '–ù–∞–ª–∏—á–Ω—ã–º–∏';
      case PaymentMethod.CARD:
        return '–ö–∞—Ä—Ç–æ–π';
      case PaymentMethod.QR:
        return 'QR-–∫–æ–¥';
      case PaymentMethod.INSTALLMENT:
        return '–†–∞—Å—Å—Ä–æ—á–∫–∞';
      default:
        return '‚Äî';
    }
  };

  const getBankName = (id: string | undefined) => {
    const bank = banks.find(b => b.id === id);
    return bank ? bank.name : '‚Äî';
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validate()) return;

    // –î–æ–±–∞–≤–∏–º console.log –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Form data before sending:', formData);
    console.log('Delivery method:', formData.deliveryMethod);
    console.log('Address:', formData.address);
    console.log('City:', formData.city);

    // 1. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    const message = `
üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
üë§ –ò–º—è: ${formData.firstName} ${formData.lastName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìß Email: ${formData.email}
üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${formData.deliveryMethod === DeliveryMethod.DELIVERY ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}

${formData.deliveryMethod === DeliveryMethod.PICKUP
        ? `üè¨ –°–∞–º–æ–≤—ã–≤–æ–∑: ${formData.pickupBranch || '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}`
        : `üèô –ì–æ—Ä–æ–¥: ${formData.city}\nüè° –ê–¥—Ä–µ—Å: ${formData.address}`
      }

üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethodLabel(formData.paymentMethod)}
${formData.paymentMethod === PaymentMethod.INSTALLMENT ? `üè¶ –ë–∞–Ω–∫: ${getBankName(formData.bank)}` : ''}

üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.notes || '‚Äî'}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${items.map(item => `‚Ä¢ ${item.name} ‚Äî ${item.quantity} —à—Ç. ${item.price.toLocaleString()} —Å–æ–º`).join('\n')}

üí∞ *–ò—Ç–æ–≥–æ: ${getTotal().toLocaleString()} —Å*
`;

    // –î–æ–±–∞–≤–∏–º console.log –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('Message to send:', message);

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const token = '8162969099:AAFP_PlhNzBbb4eZTO6Q1NOt5IQasXanuTo';
    const chatId = -4840747414;

    try {
      await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown',
        }),
      });

      // 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      clearCart();
      navigate('/order-confirmation');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram');
      console.error(error);
    }
  };

  if (items.length === 0) {
    navigate('/cart');
    return null;
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-8">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

        <form onSubmit={handleSubmit} className="flex flex-col lg:flex-row gap-8">
          {/* Left Column - Customer Information */}
          <div className="lg:w-2/3 space-y-8">
            {/* Personal Information */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ò–º—è
                  </label>
                  <input
                    type="text"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    className={`input-field ${errors.firstName ? 'border-red-500' : ''}`}
                  />
                  {errors.firstName && <p className="text-sm text-red-500 mt-1">{errors.firstName}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –§–∞–º–∏–ª–∏—è
                  </label>
                  <input
                    type="text"
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleInputChange}
                    className={`input-field ${errors.lastName ? 'border-red-500' : ''}`}
                  />
                  {errors.lastName && <p className="text-sm text-red-500 mt-1">{errors.lastName}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    placeholder="+996 XXX XXX XXX"
                    className={`input-field ${errors.phone ? 'border-red-500' : ''}`}
                  />
                  {errors.phone && <p className="text-sm text-red-500 mt-1">{errors.phone}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className={`input-field ${errors.email ? 'border-red-500' : ''}`}
                  />
                  {errors.email && <p className="text-sm text-red-500 mt-1">{errors.email}</p>}
                </div>
              </div>
            </div>

            {/* Delivery Method */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è</h2>

              <RadioGroup
                className="mb-4"
                value={formData.deliveryMethod}
                onValueChange={handleDeliveryMethodChange}
              >
                <div className="flex items-center space-x-2 mb-2">
                  <RadioGroupItem value={DeliveryMethod.DELIVERY} id="delivery" />
                  <Label htmlFor="delivery" className="font-medium">–î–æ—Å—Ç–∞–≤–∫–∞</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value={DeliveryMethod.PICKUP} id="pickup" />
                  <Label htmlFor="pickup" className="font-medium">–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞</Label>
                </div>
              </RadioGroup>

              {formData.deliveryMethod === DeliveryMethod.DELIVERY && (
                <div className="mt-4 space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ì–æ—Ä–æ–¥
                    </label>
                    <select
                      name="city"
                      value={formData.city}
                      onChange={handleInputChange}
                      className="input-field"
                    >
                      <option value="–ë–∏—à–∫–µ–∫">–ë–∏—à–∫–µ–∫</option>
                      <option value="–û—à">–û—à</option>
                      <option value="–î–∂–∞–ª–∞–ª-–ê–±–∞–¥">–î–∂–∞–ª–∞–ª-–ê–±–∞–¥</option>
                      <option value="–ö–∞—Ä–∞–∫–æ–ª">–ö–∞—Ä–∞–∫–æ–ª</option>
                      <option value="–ù–∞—Ä—ã–Ω">–ù–∞—Ä—ã–Ω</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                    </label>
                    <input
                      type="text"
                      name="address"
                      value={formData.address}
                      onChange={handleInputChange}
                      placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                      className={`input-field ${errors.address ? 'border-red-500' : ''}`}
                    />
                    {errors.address && <p className="text-sm text-red-500 mt-1">{errors.address}</p>}
                  </div>
                </div>
              )}

              {formData.deliveryMethod === DeliveryMethod.PICKUP && (
                <div className="mt-4 space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª
                    </label>
                    <select
                      name="pickupBranch"
                      value={formData.pickupBranch}
                      onChange={handleInputChange}
                      className="input-field"
                      required
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª</option>
                      <option value="–û—à—Å–∫–∏–π —Ä—ã–Ω–æ–∫, —É–ª. –ë–µ–π—à–µ–Ω–∞–ª–∏–µ–≤–æ–π, 42">
                        –û—à—Å–∫–∏–π —Ä—ã–Ω–æ–∫ ‚Äî —É–ª. –ë–µ–π—à–µ–Ω–∞–ª–∏–µ–≤–æ–π, 42
                      </option>
                      <option value="–ê–Æ GRAND, —É–ª. –í–∞–ª–∏—Ö–∞–Ω–æ–≤–∞ 2 —Å—Ç8, 1 —ç—Ç–∞–∂, 101/1 –±—É—Ç–∏–∫">
                        –ê–Æ GRAND ‚Äî –í–∞–ª–∏—Ö–∞–Ω–æ–≤–∞ 2 —Å—Ç8, 1 —ç—Ç–∞–∂, 101/1
                      </option>
                    </select>
                  </div>
                </div>
              )}

            </div>

            {/* Payment Method */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>

              <RadioGroup
                className="space-y-3"
                value={formData.paymentMethod}
                onValueChange={handlePaymentMethodChange}
              >
                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <RadioGroupItem value={PaymentMethod.CASH} id="cash" />
                  </div>
                  <div className="ml-3 text-sm">
                    <Label htmlFor="cash" className="font-medium">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Label>
                    <p className="text-gray-500">–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ</p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <RadioGroupItem value={PaymentMethod.CARD} id="card" />
                  </div>
                  <div className="ml-3 text-sm">
                    <Label htmlFor="card" className="font-medium">–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Label>
                    <p className="text-gray-500">Visa, MasterCard</p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <RadioGroupItem value={PaymentMethod.QR} id="qr" />
                  </div>
                  <div className="ml-3 text-sm">
                    <Label htmlFor="qr" className="font-medium">–ü–µ—Ä–µ–≤–æ–¥ –ø–æ QR-–∫–æ–¥—É</Label>
                    <p className="text-gray-500">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫–∏–Ω–≥</p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <RadioGroupItem value={PaymentMethod.INSTALLMENT} id="installment" />
                  </div>
                  <div className="ml-3 text-sm">
                    <Label htmlFor="installment" className="font-medium">–†–∞—Å—Å—Ä–æ—á–∫–∞</Label>
                    <p className="text-gray-500">–ü–æ–∫—É–ø–∫–∞ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –±–∞–Ω–∫-–ø–∞—Ä—Ç–Ω–µ—Ä</p>
                  </div>
                </div>
              </RadioGroup>

              {formData.paymentMethod === PaymentMethod.INSTALLMENT && (
                <div className="mt-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫
                  </label>
                  <select
                    name="bank"
                    value={formData.bank || ''}
                    onChange={handleBankChange}
                    className="input-field"
                  >
                    {banks.map(bank => (
                      <option key={bank.id} value={bank.id}>{bank.name}</option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            {/* Additional Information */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h2>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
                </label>
                <textarea
                  name="notes"
                  value={formData.notes}
                  onChange={handleInputChange}
                  rows={3}
                  className="input-field"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                ></textarea>
              </div>
            </div>
          </div>

          {/* Right Column - Order Summary */}
          <div className="lg:w-1/3">
            <div className="bg-white rounded-lg shadow p-6 sticky top-24">
              <h2 className="text-lg font-semibold mb-4">–í–∞—à –∑–∞–∫–∞–∑</h2>

              <div className="divide-y">
                {items.map((item) => (
                  <div key={item.id} className="py-3 flex justify-between">
                    <div>
                      <div className="font-medium">{item.name}</div>
                      <div className="text-sm text-gray-500">{item.quantity} x {item.price.toLocaleString()} —Å</div>
                    </div>
                    <div className="font-medium">
                      {(item.price * item.quantity).toLocaleString()} —Å
                    </div>
                  </div>
                ))}
              </div>

              <div className="border-t border-gray-200 pt-4 mt-4 space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-600">–¢–æ–≤–∞—Ä–æ–≤ ({items.length})</span>
                  <span>{getTotal().toLocaleString()} —Å</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–î–æ—Å—Ç–∞–≤–∫–∞</span>
                  <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                </div>
                <div className="border-t pt-3 mt-3 flex justify-between font-bold text-lg">
                  <span>–ò—Ç–æ–≥–æ</span>
                  <span>{getTotal().toLocaleString()} —Å</span>
                </div>
              </div>

              <button
                type="submit"
                className="w-full primary-button flex items-center justify-center py-3 mt-6"
              >
                –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
              </button>

              <p className="text-xs text-gray-500 text-center mt-4">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–∫—É–ø–∫–∏
              </p>
            </div>
          </div>
        </form>
      </main>
      <Footer />
    </div>
  );
};

export default Checkout;