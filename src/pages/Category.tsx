import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';

import { ProductCard } from '@/components/ProductCard';
import { Checkbox } from "@/components/ui/checkbox";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ö—É–∫–∏
import { useCategories, useCategoriesWithMutations } from '@/hooks/useCategories';
import { useBrands, useBrandsWithMutations } from '@/hooks/useBrands';
import { useInfiniteProducts } from '@/hooks/useProduct';
import { ProductFilters } from '@/hooks/useProduct';

interface SubCategory {
  name: string;
  slug: string;
  count: number;
}

// –ö–ª—é—á –¥–ª—è localStorage
const FILTERS_STORAGE_KEY = 'category_filters';

const Category = () => {
  const { categorySlug = 'all', subCategorySlug } = useParams<{
    categorySlug: string;
    subCategorySlug: string;
  }>();
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ö—É–∫–∏
  const { data: categories = [], isLoading: categoriesLoading } = useCategories();
  const { data: brands = [], isLoading: brandsLoading } = useBrands();

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);
  const [tempPriceRange, setTempPriceRange] = useState<[number, number]>([0, 200000]);
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 200000]);
  const [sortBy, setSortBy] = useState<string>('featured');
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const currentCategory = useMemo(() => {
    if (categorySlug === 'all') {
      return { id: '0', category: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', mini_categories: [], pathName: '' };
    }

    const decodedSlug = decodeURIComponent(categorySlug);
    
    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ pathName
    const found = categories.find(cat =>
      cat.category === decodedSlug ||
      cat.pathName === decodedSlug ||
      cat.id.toString() === categorySlug
    );
    
    if (found) {
      console.log('Found category:', found);
      return found;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
    return { id: '0', category: decodedSlug, mini_categories: [], pathName: decodedSlug };
  }, [categories, categorySlug]);

  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const productFilters: ProductFilters = useMemo(() => {
  const filters: ProductFilters = {};
  
  // –í–†–ï–ú–ï–ù–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –≤ useMemo –≤—ã—à–µ
  
  console.log('üì¶ Final filters (empty for now):', filters);
  return filters;
}, []);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º infinite scroll –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
  const pageSize = !subCategorySlug ? 50 : 9;
  
  const {
    data: productsData,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading: productsLoading,
    error: productsError
  } = useInfiniteProducts(productFilters, pageSize);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ò –§–ò–õ–¨–¢–†–£–ï–ú –ò–•
const products = useMemo(() => {
  let allProducts = productsData?.pages.flatMap(page => page.products) || [];
  
  console.log('üìä === PRODUCTS DEBUG ===');
  console.log('Total products before filter:', allProducts.length);
  console.log('Category slug:', categorySlug);
  console.log('Sub-category slug:', subCategorySlug);
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
  if (subCategorySlug) {
    const decodedSubCat = decodeURIComponent(subCategorySlug).toLowerCase();
    console.log('Filtering by subcategory:', decodedSubCat);
    
    allProducts = allProducts.filter(product => {
      if (!product.pathName) return false;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ pathName
      // –§–æ—Ä–º–∞—Ç: "5. –ú–µ–ª–∫–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞/–ë–ª–µ–Ω–¥–µ—Ä—ã –∏ –ß–æ–ø–ø–µ—Ä—ã"
      const parts = product.pathName.split('/');
      if (parts.length < 2) return false;
      
      const productSubCategory = parts[1].trim().toLowerCase();
      const matches = productSubCategory === decodedSubCat;
      
      console.log(`Product: "${product.name}" | SubCat: "${productSubCategory}" | Matches: ${matches}`);
      
      return matches;
    });
    
    console.log('Products after filter:', allProducts.length);
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  if (categorySlug !== 'all' && !subCategorySlug) {
    const decodedCat = decodeURIComponent(categorySlug).toLowerCase();
    
    allProducts = allProducts.filter(product => {
      if (!product.pathName) return false;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ pathName
      const parts = product.pathName.split('/');
      const mainCategory = parts[0].trim().toLowerCase();
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "4. –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
      return mainCategory.includes(decodedCat) || decodedCat.includes(mainCategory);
    });
  }
  
  console.log('Final products count:', allProducts.length);
  console.log('=====================');
  
  return allProducts;
}, [productsData, categorySlug, subCategorySlug]);

  const totalCount = productsData?.pages[0]?.totalCount || 0;

  // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const subCategories: SubCategory[] = useMemo(() => {
  console.log('=== SUBCATEGORIES DEBUG ===');
  console.log('Current category:', currentCategory);
  
  if (!currentCategory?.mini_categories || !currentCategory?.pathName) {
    return [];
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const subs = currentCategory.mini_categories.map(name => {
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≥–¥–µ pathName –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const count = products.filter(p => {
      if (!p.pathName) return false;
      const parts = p.pathName.split('/');
      if (parts.length < 2) return false;
      const subCat = parts[1].trim();
      return subCat.toLowerCase() === name.toLowerCase();
    }).length;
    
    console.log(`Subcategory "${name}": ${count} products`);
    
    return {
      name,
      slug: name.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]/g, ''),
      count: count
    };
  });
  
  console.log('===========================');
  return subs;
}, [currentCategory, products]);
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º)
  const availableBrandsInCategory = useMemo(() => {
    const brandNames = new Set<string>();
    products.forEach(product => {
      if (product.brand && product.brand.trim()) {
        brandNames.add(product.brand);
      }
    });
    return Array.from(brandNames);
  }, [products]);

  const availableBrands = useMemo(() => {
    return brands.filter(brand => availableBrandsInCategory.includes(brand.name));
  }, [brands, availableBrandsInCategory]);

  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const { minPrice, maxPrice } = useMemo(() => {
    if (products.length === 0) return { minPrice: 0, maxPrice: 200000 };

    const prices = products.map(p => p.price);
    return {
      minPrice: Math.min(...prices),
      maxPrice: Math.max(...prices)
    };
  }, [products]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è localStorage
  const saveFiltersToStorage = (filters: {
    selectedBrands: string[];
    priceRange: [number, number];
    sortBy: string;
    categorySlug: string;
  }) => {
    try {
      localStorage.setItem(FILTERS_STORAGE_KEY, JSON.stringify(filters));
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:', error);
    }
  };

  const loadFiltersFromStorage = (currentCategorySlug: string) => {
    try {
      const saved = localStorage.getItem(FILTERS_STORAGE_KEY);
      if (saved) {
        const filters = JSON.parse(saved);
        if (filters.categorySlug === currentCategorySlug) {
          return filters;
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:', error);
    }
    return null;
  };

  const clearFiltersFromStorage = () => {
    try {
      localStorage.removeItem(FILTERS_STORAGE_KEY);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (categorySlug) {
      const savedFilters = loadFiltersFromStorage(categorySlug);
      if (savedFilters) {
        setSelectedBrands(savedFilters.selectedBrands || []);
        setPriceRange(savedFilters.priceRange || [0, 200000]);
        setTempPriceRange(savedFilters.priceRange || [0, 200000]);
        setSortBy(savedFilters.sortBy || 'featured');
      } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setSelectedBrands([]);
        setSortBy('featured');
        setPriceRange([0, 200000]);
        setTempPriceRange([0, 200000]);
      }
    }
  }, [categorySlug]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (products.length > 0 && priceRange[0] === 0 && priceRange[1] === 200000) {
      const newRange: [number, number] = [minPrice, maxPrice];
      setPriceRange(newRange);
      setTempPriceRange(newRange);
    }
  }, [products, minPrice, maxPrice, priceRange]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleBrandToggle = (brand: string) => {
    const newSelectedBrands = selectedBrands.includes(brand)
      ? selectedBrands.filter(b => b !== brand)
      : [...selectedBrands, brand];

    setSelectedBrands(newSelectedBrands);

    saveFiltersToStorage({
      selectedBrands: newSelectedBrands,
      priceRange,
      sortBy,
      categorySlug
    });
  };

  const handlePriceChange = (value: [number, number]) => {
    setTempPriceRange(value);
  };

  const applyPriceFilterNow = () => {
    setPriceRange(tempPriceRange);
    saveFiltersToStorage({
      selectedBrands,
      priceRange: tempPriceRange,
      sortBy,
      categorySlug
    });
  };

  const handleSortChange = (newSortBy: string) => {
    setSortBy(newSortBy);
    saveFiltersToStorage({
      selectedBrands,
      priceRange,
      sortBy: newSortBy,
      categorySlug
    });
  };

  const resetFilters = () => {
    setSelectedBrands([]);
    const resetRange: [number, number] = [minPrice, maxPrice];
    setPriceRange(resetRange);
    setTempPriceRange(resetRange);
    setSortBy('featured');
    clearFiltersFromStorage();
  };

const handleSubCategoryClick = (subCatName: string) => {
  // –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è –¥–ª—è URL
  const encodedName = encodeURIComponent(subCatName);
  navigate(`/category/${categorySlug}/${encodedName}`);
};

  const handleBackToCategory = () => {
    navigate(`/category/${categorySlug}`);
  };

  const handleLoadMore = () => {
    if (hasNextPage && !isFetchingNextPage) {
      fetchNextPage();
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const isLoading = categoriesLoading || brandsLoading || productsLoading;

  if (isLoading) {
    return (
      <div className="min-h-screen flex flex-col">
        <main className="flex-1 container mx-auto px-4 py-8">
          <div className="flex justify-center items-center h-64">
            <div className="flex items-center space-x-2">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
              <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
            </div>
          </div>
        </main>
      </div>
    );
  }

  if (productsError) {
    return (
      <div className="min-h-screen flex flex-col">
        <main className="flex-1 container mx-auto px-4 py-8">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <div className="text-red-600 mb-2">‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</div>
            <div className="text-gray-700">{(productsError as Error).message}</div>
            <button
              onClick={() => window.location.reload()}
              className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col">
      <main className="flex-1 container mx-auto px-4 py-8">
        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
        <nav className="mb-4 text-sm">
          <div className="flex items-center space-x-2 text-gray-600">
            <Link to="/" className="hover:text-blue-600">–ì–ª–∞–≤–Ω–∞—è</Link>
            <span>/</span>
            <Link to={`/category/${categorySlug}`} className="hover:text-blue-600">
              {currentCategory?.category || decodeURIComponent(categorySlug)}
            </Link>
            {subCategorySlug && (
              <>
                <span>/</span>
                <span className="text-gray-900">{subCategorySlug}</span>
              </>
            )}
          </div>
        </nav>

        <div className="mb-6">
          <div className="relative mb-4 h-40 overflow-hidden rounded-lg">
            <div className="absolute inset-0 bg-opacity-90 flex items-center justify-center" style={{ background: "rgb(227 6 19 / var(--tw-bg-opacity, 1))" }}>
              <h1 className="text-3xl font-bold text-white text-center px-4">
                {subCategorySlug ? subCategorySlug : (currentCategory?.category || decodeURIComponent(categorySlug))}
              </h1>
            </div>
          </div>

          {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {!subCategorySlug && subCategories.length > 0 && (
            <div className="mb-6">
              <h2 className="text-lg font-medium mb-4">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3">
                {subCategories.map((subCat) => (
                  <button
                    key={subCat.slug}
                    onClick={() => handleSubCategoryClick(subCat.name)}
                    className="bg-white border border-gray-200 rounded-lg p-3 text-center hover:border-blue-500 hover:shadow-md transition-all"
                  >
                    <div className="text-sm font-medium text-gray-900 mb-1">{subCat.name}</div>
                    <div className="text-xs text-gray-500">{subCat.count} —Ç–æ–≤–∞—Ä–æ–≤</div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {subCategorySlug && (
            <div className="mb-4">
              <button
                onClick={handleBackToCategory}
                className="flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                –ù–∞–∑–∞–¥ –∫ {currentCategory?.category}
              </button>
            </div>
          )}

          <p className="text-gray-600">
            –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {products.length} –∏–∑ {totalCount}
          </p>
        </div>

        <div className="flex flex-col lg:flex-row gap-6">
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className={`lg:w-1/4 ${mobileFiltersOpen ? 'block' : 'hidden lg:block'}`}>
            <div className="bg-white rounded-lg shadow divide-y">
              <div className="p-4">
                <h3 className="font-medium mb-4">–¶–µ–Ω–∞</h3>
                <div className="px-2">
                  <Slider
                    defaultValue={[minPrice, maxPrice]}
                    value={tempPriceRange}
                    onValueChange={handlePriceChange}
                    min={minPrice}
                    max={maxPrice}
                    step={1000}
                    className="mb-4"
                  />
                  <div className="flex justify-between text-sm mb-3">
                    <span>{tempPriceRange[0].toLocaleString()} —Å</span>
                    <span>{tempPriceRange[1].toLocaleString()} —Å</span>
                  </div>

                  <div className="flex justify-between text-xs text-gray-500 mb-3">
                    <span>–ú–∏–Ω: {minPrice.toLocaleString()} —Å</span>
                    <span>–ú–∞–∫—Å: {maxPrice.toLocaleString()} —Å</span>
                  </div>

                  {(tempPriceRange[0] !== priceRange[0] || tempPriceRange[1] !== priceRange[1]) && (
                    <button
                      onClick={applyPriceFilterNow}
                      className="w-full bg-blue-600 text-white text-sm py-2 px-3 rounded hover:bg-blue-700 transition-colors"
                    >
                      –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                    </button>
                  )}
                </div>
              </div>

              <div className="p-4">
                <h3 className="font-medium mb-4">–ë—Ä–µ–Ω–¥</h3>
                <div className="space-y-2 max-h-64 overflow-y-auto">
                  {availableBrands.map(brand => (
                    <div key={brand.id} className="flex items-center">
                      <Checkbox
                        id={`brand-${brand.id}`}
                        checked={selectedBrands.includes(brand.name)}
                        onCheckedChange={() => handleBrandToggle(brand.name)}
                      />
                      <Label htmlFor={`brand-${brand.id}`} className="ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                        {brand.name}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* –¢–æ–≤–∞—Ä—ã */}
          <div className="lg:w-3/4">
            <div className="flex justify-between items-center mb-6">
              <button
                className="lg:hidden flex items-center gap-2 text-sm font-medium bg-white py-2 px-3 rounded border"
                onClick={() => setMobileFiltersOpen(!mobileFiltersOpen)}
              >
                –§–∏–ª—å—Ç—Ä—ã
              </button>
              <div className="flex items-center">
                <label htmlFor="sort" className="text-sm mr-2 hidden sm:inline">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</label>
                <select
                  id="sort"
                  value={sortBy}
                  onChange={(e) => handleSortChange(e.target.value)}
                  className="input-field text-sm py-2"
                >
                  <option value="featured">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                  <option value="price-asc">–¶–µ–Ω–∞: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                  <option value="price-desc">–¶–µ–Ω–∞: –ø–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                  <option value="name-asc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                </select>
              </div>
            </div>

            {products.length > 0 ? (
              <>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {products.map(product => (
                    <ProductCard key={product.id} product={product} />
                  ))}
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" */}
                {hasNextPage && (
                  <div className="mt-8 text-center">
                    <button
                      onClick={handleLoadMore}
                      disabled={isFetchingNextPage}
                      className="primary-button inline-flex items-center gap-2 min-w-[200px] justify-center"
                    >
                      {isFetchingNextPage ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞...
                        </>
                      ) : (
                        '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'
                      )}
                    </button>
                  </div>
                )}

                {!hasNextPage && products.length > 0 && (
                  <div className="mt-8 text-center text-gray-500">
                    –ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
                  </div>
                )}
              </>
            ) : (
              <div className="bg-white rounded-lg shadow p-8 text-center">
                <div className="text-gray-400 mb-4">
                  <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <h3 className="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p className="text-gray-600 mb-4">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
                <button
                  onClick={resetFilters}
                  className="primary-button"
                >
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Category;